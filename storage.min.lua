term.clear()local a=dofile("rom/modules/main/cc/expect.lua")local b,c,d=a.expect,a.field,a.range;local function e(term)local f,g=term.getSize()return g end;local function h(term)local f,g=term.getSize()return f end;local function i()return peripheral.find("speaker")end;local function j(term)return term.isColor()end;local function k(l,m)b(1,l,"table")b(2,m,"number")if j(l)then l.setTextColor(m)end end;local function n(l,m)b(1,l,"table")b(2,m,"number")if j(l)then l.setBackgroundColor(m)end end;local function o(l,p,q)b(1,l,"table")b(2,p,"number")b(3,q,"string")local f=h(l)l.setCursorPos(math.floor(f/2-q:len()/2),p)l.write(q)end;local function r(l,s,p,q)b(1,l,"table")b(2,s,"number")b(3,p,"number")b(4,q,"string")l.setCursorPos(s+1-q:len(),p)l.write(q)end;local t={H=e,W=h,Speaker=i,Color=j,SetBackgroundColor=n,SetTextColor=k,CenterWrite=o,LeftWrite=r}local function u(v)local w=peripheral.wrap(v.outChest)local x={peripheral.find("inventory",function(y,z)return y~=v.outChest end)}local A={empty={chests={},count=0}}for B,C in pairs(x)do local D=C.list()local E={}local F=0;for G=1,C.size()do table.insert(E,G)end;for G,H in pairs(D)do table.remove(E,G-F)if A[H.name]==nil then A[H.name]={count=0,chests={}}end;table.insert(A[H.name].chests,{chest=peripheral.getName(C),slot=G})A[H.name].count=A[H.name].count+H.count end;for B,G in pairs(E)do table.insert(A.empty.chests,{chest=peripheral.getName(C),slot=G})end end;local I={empty={chests={},count=0}}local D=w.list()local E={}local F=0;for G=1,w.size()do table.insert(E,G)end;for G,H in pairs(D)do table.remove(E,G-F)if I[H.name]==nil then I[H.name]={count=0,chests={}}end;table.insert(I[H.name].chests,{chest=peripheral.getName(w),slot=G})I[H.name].count=I[H.name].count+H.count end;for B,G in pairs(E)do table.insert(I.empty.chests,{chest=peripheral.getName(w),slot=G})end;return I,A end;local function J(table,K,L)if L==nil then L=function(M,N,K)return N==K end end;for M,N in pairs(table)do if L(M,N,K)then return true end end;return false end;local function O(K,y,P,Q)local R=true;if y~=nil and K.displayName~=y then R=false end;if P~=nil then if K.enchantments==nil then R=false end;for B,S in pairs(P)do if not J(K.enchantments,S.name,function(B,N,K)return N.name==K end)then R=false end;if not J(K.enchantments,S.level,function(B,N,K)return K==nil or N.level==K end)then R=false end end end;if Q~=nil then for B,T in pairs(Q)do if not J(K.tags,T,function(M,N,K)return M==K and N end)then R=false end end end;return R end;local function U(v,V,y,P,Q)local w=peripheral.wrap(v.outChest)local W,X=u(v)if V==nil then for Y=1,w.size()do local Z=0;for B,B in pairs(w.list())do Z=Z+1 end;if Z<1 then break end;if w.getItemDetail(Y)~=nil then local R=true;if not O(w.getItemDetail(Y),y,P,Q)then R=false end;if R then local x={}local _=X[w.getItemDetail(Y).name]if _~=nil then x=_.chests end;for B,C in pairs(X["empty"].chests)do if not J(x,C,function(M,N,K)return N.chest==K.chest end)then table.insert(x,C)end end;for B,C in pairs(x)do if w.getItemDetail(Y)==nil then break end;peripheral.wrap(C.chest).pullItems(v.outChest,Y)end end end end else local a0={}local a1=W[V]if a1~=nil then for B,a2 in pairs(a1.chests)do table.insert(a0,a2.slot)end end;for B,Y in pairs(a0)do local Z=0;for B,B in pairs(w.list())do Z=Z+1 end;if Z<1 then break end;if w.getItemDetail(Y)~=nil then local R=true;if not O(w.getItemDetail(Y),y,P,Q)then R=false end;if R then local x={}local _=X[V]if _~=nil then x=_.chests end;for B,C in pairs(X["empty"].chests)do if not J(x,C,function(M,N,K)return N.chest==K.chest end)then table.insert(x,C)end end;for B,C in pairs(x)do if w.getItemDetail(Y)==nil then break end;peripheral.wrap(C.chest).pullItems(v.outChest,Y)end end end end end end;local function a3(v,V,y,P,Q)U(v)local a4=peripheral.wrap(v.outChest)if V==nil then for B,C in pairs({peripheral.find("inventory",function(y,z)return y~=v.outChest end)})do for Y,B in pairs(C.list())do local H=C.getItemDetail(Y)if O(H,y,P,Q)then a4.pullItems(peripheral.getName(C),Y)end end end else local B,x=u(v)for B,Y in pairs(x[V].chests)do local Z=a4.size()for B,B in pairs(a4.list())do Z=Z-1 end;if Z<1 then break end;local H=peripheral.call(Y.chest,"getItemDetail",Y.slot)if O(H,y,P,Q)then a4.pullItems(Y.chest,Y.slot)end end end end;local function a5(v,V,y,P,Q)if V==nil then local a6={}for B,C in pairs({peripheral.find("inventory",function(y,z)return y~=v.outChest end)})do for Y,B in pairs(C.list())do local H=C.getItemDetail(Y)if O(H,y,P,Q)then if a6[H.name]==nil then a6[H.name]=0 end;a6[H.name]=a6[H.name]+H.count end end end;return a6 end;local B,x=u(v)local a6=0;for B,Y in pairs(x[V].chests)do local H=peripheral.call(Y.chest,"getItemDetail",Y.slot)if O(H,y,P,Q)then a6=a6+H.count end end;return a6 end;local function a7(v,V,y,P,Q)if V==nil then local a6={}local C=peripheral.wrap(v.outChest)for Y,B in pairs(C.list())do local H=C.getItemDetail(Y)if O(H,y,P,Q)then if a6[H.name]==nil then a6[H.name]=0 end;a6[H.name]=a6[H.name]+H.count end end;return a6 end;local B,x=u(v)local a6=0;for B,Y in pairs(x[V].chests)do local H=peripheral.call(Y.chest,"getItemDetail",Y.slot)if O(H,y,P,Q)then a6=a6+H.count end end;return a6 end;local a8={getItems=u,insertItems=U,outputItems=a3,listItems=a5,listOutputed=a7}local function a9(y)local aa=fs.open(y,"r")local ab=textutils.unserialise(aa.readAll())aa.close()return ab end;local function ac(y,H)local aa=fs.open(y,"w")aa.write(textutils.serialise(H))aa.close()end;local function ad(y)local aa=fs.open(y,"r")local ab=aa.readAll()aa.close()return ab end;local function ae(y,af)local aa=fs.open(y,"w")aa.write(af)aa.close()end;local function ag(y,af)local aa=fs.open(y,"a")aa.write(af)aa.close()end;local ah={readData=a9,writeData=ac,readText=ad,writeText=ae,appendText=ag}local ai=3;local aj=t.H(term)-2;local ak=aj-ai+1;local al={select="Select",fluid="Fluids",items="Items",fluidOutput="Fluid Output",fluidStorage="Fluid Storage",itemOutput="Item Output",itemStorage="Item Storage"}local v=ah.readData("storage_config.txt")local am=1;local an=1;local A={}local ao=al.select;local ap={}local function aq()local ar=ao==al.itemOutput;A={}local W,as=a8.getItems(v)if ar then for at,a2 in pairs(W)do if at~="empty"then table.insert(A,{name=at,count=a2.count,chests=a2.chests})end end else for at,a2 in pairs(as)do if at~="empty"then table.insert(A,{name=at,count=a2.count,chests=a2.chests})end end end end;local function au()ao=al.itemStorage;aq()local av=0;for B,a2 in pairs(A)do av=av+a2.count end;ao=al.itemOutput;aq()local aw=0;for B,a2 in pairs(A)do aw=aw+a2.count end;A={{name=al.itemOutput,count=aw},{name=al.itemStorage,count=av}}ao=al.select end;local function ax()for G=ai,aj,1 do term.setCursorPos(1,G)local K=""local ay=an+G-ai;K=A[ay]if K==nil then break end;if ay==am then t.SetTextColor(term,colors.lightBlue)term.write("["..K.name.."]")t.LeftWrite(term,t.W(term),G,"[x"..K.count.."]")else t.SetTextColor(term,colors.white)term.write(" "..K.name)t.LeftWrite(term,t.W(term)-1,G,"x"..K.count)end end end;local function az()term.clear()term.setCursorPos(1,1)t.SetTextColor(term,colors.white)if ao==al.select then term.write("Select where to move from")else term.write("Moving from "..ao)end;ax()if an>1 then t.SetTextColor(term,colors.yellow)term.setCursorPos(1,ai)term.write("^")t.LeftWrite(term,t.W(term),ai,"^")t.SetTextColor(term,colors.white)end;if an+aj-ai<#A then t.SetTextColor(term,colors.yellow)term.setCursorPos(1,aj)term.write("v")t.LeftWrite(term,t.W(term),aj,"v")t.SetTextColor(term,colors.white)end end;au()while true do if#A<ak then an=1 end;if an+ak-1>#A then an=#A-ak end;if an<1 then an=1 end;if am>#A then am=#A end;if am<1 then am=1 end;az()local V,M=os.pullEvent("key")if M==keys.up or M==keys.w then if am>1 then am=am-1;if am-an<2 and an>1 then an=an-1 end end elseif M==keys.down or M==keys.s then if am<#A then am=am+1;if am-an>ak-3 and an<#A-ak+1 then an=an+1 end end elseif M==keys.backspace then if ao~=al.select then am=0;au()else term.clear()term.setCursorPos(1,1)t.SetTextColor(term,colors.white)return end elseif M==keys.enter then if ao==al.select then ao=A[am].name;aq()else t.SetTextColor(term,colors.lime)term.setCursorPos(1,1)term.clearLine()term.write("Moving "..A[am].name.." from "..ao.."...")if ao==al.itemOutput then a8.insertItems(v,A[am].name)else a8.outputItems(v,A[am].name)end;aq()end end end
